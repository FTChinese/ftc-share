/// Generate base share styles
/// @param {String} $classname [o-share] - base class name
/// If you want to customize the look and feel of all icons, pass content block to mixin `oShareCustomBase {}`.
@mixin oShareBase($classname: o-share) {
	.#{$classname} {
		display: inline-block;
		ul {
			margin: 0;
			padding: 0;
			// Clearfix
			&:after {
				clear: both;
				content: '';
				display: table;
			}
		}
	}
	.#{$classname}__action {
	// Float everything to avoid gaps in HTML.
		float: left;
		margin: 0 5px 0 0;
		list-style-type: none;
		
		i {
			float: left;
			background-size: 100% 100%;
			background-repeat: no-repeat;
			background-position: 50%;

			width: $o-share-icon-size;
			height: $o-share-icon-size;
			text-indent: -($o-share-icon-size * 1000);
			white-space: nowrap;
			overflow: hidden;
		}
		a {
			float: left;
			text-decoration: none;
			padding: 4px;			
			border-radius: $o-share-icon-radius;
			&:hover {
				opacity: 0.8;
			}
		}
	}	
}
/// @param {String} $name - One of the $o-share-icon-names
/// @param {String} $theme - One of the theme names in $o-share-themes.
@mixin oShareSetIcons($foreground, $classname: o-share) {
// set the icon's shape and color 
	@if type-of($foreground) == map {
		@each $icon, $color in $foreground {
			.#{$classname}__#{$icon} i {
				background-image: sassvg("social-" + $icon, $fillcolor: $color);
			}
		}
	} @else {
	
		$color: if(type-of($foreground) == string, oColorsGetPaletteColor($foreground), $foreground);

		@each $icon in $o-share-icon-names {

			.#{$classname}__#{$icon} i {
				background-image: sassvg("social-" + $icon, $fillcolor: $color)
			}
		}
	}
}

@mixin oShareSetBackground($background, $classname: o-share) {
	
	@if type-of($background) == map {
		@each $icon, $color in $background {
			.#{$classname}__#{$icon} a {
				background-color: $color;
			}
		}
	} @else if type-of($background) == string {
		
		$color: if(type-of($background) == string, oColorsGetPaletteColor($background), $background);

		.#{#classname}__action a {
			background-color: $color;
		} 
	}	
}

@mixin oShareSetHover($hover, $classname: o-share) {

	@if type-of($hover) == map {
		
		@each $icon, $color in $hover {
			.#{$classname}__#{$icon} a:hover {
				background-color: $color;
			}
		}

	} @else {

		$color: if(type-of($hover) == string, oColorsGetPaletteColor($hover), $hover);

		@debug "hover color: #{inspect($color)}";

		.#{$classname}__action a:hover {
			background-color: $color;
		}
	}	
}

// Some pre-defined themes.
@mixin oShareIconDefault {
	@each $name in $o-share-icon-names {
		@include oShareIconFor($name);
	}
}
@mixin oShareIconTeal {
	@each $name in $o-share-icon-names {
		@include oShareIconFor($name, teal);
	}
}
@mixin oShareIconTint {
	@each $name in $o-share-icon-names {
		@include oShareIconFor($name, tint);
	}
	@include oShareCustomBase {
		border-radius: 3px;
	}
	
}
@mixin oShareIconDark {
	@each $name in $o-share-icon-names {
		@include oShareIconFor($name, dark);
	}
	@include oShareCustomBase {
		border: 1px solid #fff;
	}
}


// The following mixins should be used together.
// Style svgs embeded in HTML. See `main.mustache`.
@mixin oShareSpriteBase($radius: null, $width: $o-share-icon-size, $height: $o-share-icon-size, $classname: o-share) {

	.#{$classname} {
		display: inline-block;
		ul {
			margin: 0;
			padding: 0;
			// Clearfix
			&:after {
				clear: both;
				content: '';
				display: table;
			}
		}
	}

	.#{$classname}__action {
		float: left;
		margin: 0 5px 0 0;
		list-style-type: none;

		i {
			display: none;
		}
		svg {
			float: left;
			width: $width;
			height: $height;
			background-color: transparent;
		}
		a {
			float: left;
			text-decoration: none;
			padding: 4px;
			@if ($radius != null) {
				border-radius: $radius;
			}
		}
		@content;
	}
}

// Add color to svg sprite.
@mixin oShareSpriteIcon($name, $classname: o-share) {
	$iconname: "social-" + $name;

	$iconcolor: oColorsGetPaletteColor($iconname);

	.#{$classname}__#{$name} {
		a {
			background-color: $iconcolor;
		}
		svg {
			fill: oColorsGetPaletteColor('white');
		}
	}
}